---
description: Documentation standards and requirements
globs: ["docs/**/*"]
alwaysApply: false
---

# Documentation Rules - AI-Dev-Lab v0.6.4

## Version Headers

### Required Format
All documentation files must include version headers:

```html
<!-- Version: 0.6.4 -->
```

### Placement
- **Top of file**: Immediately after YAML frontmatter
- **Markdown files**: After title, before content
- **Validation**: Checked during documentation review

## Documentation Types

### Architecture Documentation
- **Current State**: Diagrams must reflect v0.6.4 architecture
- **Component Relationships**: Clear dependency mapping
- **Data Flow**: End-to-end process documentation
- **Security Boundaries**: Access control documentation

### API Documentation
- **Tool Specifications**: Complete parameter and return types
- **Usage Examples**: Practical code examples
- **Error Handling**: Error codes and remediation steps
- **Performance Characteristics**: Response times and limits

### Deployment Guides
- **Environment Setup**: Prerequisites and dependencies
- **Configuration**: Required settings and variables
- **Monitoring**: Health check and alerting setup
- **Rollback Procedures**: Emergency recovery steps

## Content Standards

### Cross-References
- **Internal Links**: Use relative paths for project references
- **External Links**: Validate URLs and document access requirements
- **Version Consistency**: References must match current version
- **Maintenance**: Regular validation of all links

### Code Examples
```python
# Good: Version-specific, complete example
# AI-Dev-Lab v0.6.4 - MCP Server Example
from mcp_server import MCPServer

server = MCPServer()
await server.start()
```

### Terminology Consistency
- **MCP**: Model Context Protocol (not MCP servers)
- **RAG**: Retrieval-Augmented Generation
- **Lab**: Experimental development environment
- **App**: Production-ready components

## Documentation Workflow

### Creation Process
1. **Draft**: Create initial documentation
2. **Review**: Technical accuracy validation
3. **Version Header**: Add current version tag
4. **Cross-References**: Validate all internal links
5. **Approval**: Documentation review completion

### Update Requirements
- **Code Changes**: Documentation must be updated
- **New Features**: Documentation required before merge
- **Breaking Changes**: Migration guides mandatory
- **Deprecations**: Clear deprecation notices

## MCP Tool Documentation

### Tool Registration
```yaml
# docs/mcp/tools/tool-name.md
---
title: Tool Name
version: 0.6.4
category: MCP Tools
---

# Tool Name

## Overview
Brief description of tool purpose and functionality.

## Parameters
| Parameter | Type | Required | Description |
|-----------|------|----------|-------------|
| param1 | string | Yes | Parameter description |

## Usage Examples
\`\`\`python
result = await tool_name({"param1": "value"})
\`\`\`

## Error Handling
- **ErrorCode**: Description and remediation
- **AnotherError**: Description and remediation

## Security Considerations
- Access requirements
- Data handling policies
- Audit logging requirements
```

### Tool Categories
- **Search Tools**: Document search and retrieval
- **Code Tools**: Code analysis and modification
- **System Tools**: System interaction and monitoring
- **Security Tools**: Security validation and enforcement

## Release Documentation

### Release Notes Format
```markdown
# Release Notes - v0.6.4

## New Features
- Feature description with links to documentation

## Bug Fixes
- Bug description with issue references

## Security Updates
- Security improvements and vulnerability fixes

## Breaking Changes
- Migration instructions for breaking changes

## Known Issues
- Current limitations and workarounds
```

### Deployment Documentation
- **Pre-deployment**: Validation checklist
- **Post-deployment**: Verification steps
- **Rollback**: Emergency procedures
- **Monitoring**: Key metrics to monitor

## Quality Assurance

### Documentation Checklist
- ✅ Version header present and correct
- ✅ Cross-references validated
- ✅ Code examples functional
- ✅ Terminology consistent
- ✅ Links accessible
- ✅ Diagrams current
- ✅ Security considerations documented

### Review Process
- **Technical Review**: Accuracy validation
- **Security Review**: Sensitive information check
- **User Experience**: Clarity and usability
- **Maintenance Review**: Update procedures verified

## Maintenance Guidelines

### Regular Updates
- **Monthly**: Validate all external links
- **Quarterly**: Review architecture diagrams
- **Release**: Update version headers
- **Breaking Changes**: Immediate documentation updates

### Archival Process
- **Deprecated Features**: Mark as deprecated with removal timeline
- **Old Versions**: Archive with clear version indicators
- **Migration Guides**: Provide for major version changes