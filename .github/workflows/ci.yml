name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  security-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run security tests
      run: |
        python -m pytest lab/security/tests/ -v
    
    - name: Run detect-secrets
      run: |
        detect-secrets scan --baseline .secrets.baseline || true

  eval-tests:
    runs-on: ubuntu-latest
    continue-on-error: true  # Non-blocking
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run evaluation tests
      run: |
        python -m pytest lab/eval/ -v || true
        python lab/eval/run_eval.py --output eval_results.json || true
    
    - name: Upload evaluation results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: eval-results
        path: eval_results.json

  integration-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run integration tests
      run: |
        python -m pytest lab/tests/ -v
    
    - name: Test MCP server startup
      run: |
        timeout 10s python -m mcp-server.server || true

  freeze-guard:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check for code freeze violations
      run: |
        # Check if this is a code freeze branch
        if [[ "${{ github.head_ref }}" == ops/cursor-setup-and-audit-* ]]; then
          echo "Code freeze active - checking for forbidden changes..."
          # Get list of changed files
          CHANGED_FILES=$(git diff --name-only origin/main...HEAD)
          echo "Changed files: $CHANGED_FILES"
          
          # Check for changes in app/ or lab/ directories (logic changes)
          FORBIDDEN_CHANGES=$(echo "$CHANGED_FILES" | grep -E '^(app/|lab/)' | grep -v -E '\.(md|json|yml|yaml|toml|txt|sh)$' || true)
          
          if [ -n "$FORBIDDEN_CHANGES" ]; then
            echo "❌ Code freeze violation detected!"
            echo "The following files contain logic changes during code freeze:"
            echo "$FORBIDDEN_CHANGES"
            echo ""
            echo "During code freeze, only config/docs/CI changes are allowed."
            echo "Allowed file types: .md, .json, .yml, .yaml, .toml, .txt, .sh"
            exit 1
          else
            echo "✅ No code freeze violations detected"
          fi
        else
          echo "No code freeze active for this branch"
        fi

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run linting (ruff check)
      run: |
        # Only check changed Python files to avoid pre-existing issues
        CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep '\.py$' || true)
        if [ -n "$CHANGED_FILES" ]; then
          echo "Checking changed Python files: $CHANGED_FILES"
          echo "$CHANGED_FILES" | xargs ruff check --output-format=github
        else
          echo "No Python files changed, skipping ruff check"
        fi
    
    - name: Run formatting (ruff format)
      run: |
        # Only check changed Python files to avoid pre-existing issues
        CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep '\.py$' || true)
        if [ -n "$CHANGED_FILES" ]; then
          echo "Checking changed Python files with ruff format: $CHANGED_FILES"
          echo "$CHANGED_FILES" | xargs ruff format --check
        else
          echo "No Python files changed, skipping ruff format check"
        fi
    
    - name: Run Black formatting check
      run: |
        # Only check changed Python files to avoid pre-existing issues
        CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep '\.py$' || true)
        if [ -n "$CHANGED_FILES" ]; then
          echo "Checking changed Python files with Black: $CHANGED_FILES"
          echo "$CHANGED_FILES" | xargs black --check
        else
          echo "No Python files changed, skipping Black check"
        fi

  docs-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Check documentation version headers
      run: |
        # Check for version headers in docs (new format)
        MISSING_HEADERS=$(find docs/ -name "*.md" -exec sh -c 'head -n1 "$1" | grep -q "^Version:" || echo "$1"' _ {} \; || true)
        if [ -n "$MISSING_HEADERS" ]; then
          echo "❌ Documentation files missing version headers:"
          echo "$MISSING_HEADERS"
          echo "Please add version headers like: Version: v0.6.1"
          exit 1
        else
          echo "✅ All documentation files have version headers"
        fi
